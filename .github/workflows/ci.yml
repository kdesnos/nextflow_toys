name: Unit tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13.2'

    # Download required files
    - name: Download required files
      run: |
        # Declare the list of files and their paths
        files=(
          "250510_210912_CELEBI/karol_210912_ult_2025-05-10_10_30_18_report.html"
          "250511_250201_CELEBI/karol_250201_2025-05-11_09_56_28_report.html"
          "250508_250313_CELEBI/karol_250313_2025-05-08_10_36_28_report.html"
          "250514_250106_CELEBI/karol_250106_ult_2025-05-14_09_41_50_report.html"
          "250510_210912_CELEBI/karol_210912_ult_2025-05-10_10_30_18_log.log"
          "250511_250201_CELEBI/karol_250201_2025-05-11_09_56_28_log.log"
          "250508_250313_CELEBI/karol_250313_2025-05-08_10_36_28_log.log"
          "250514_250106_CELEBI/karol_250106_ult_2025-05-14_09_41_50_log.log"
        )

        base_url="https://kdesnos.fr/wp-content/uploads/nextflow_traces/"
        base_dir="./dat"

        # Iterate over the files and download them
        for file in "${files[@]}"; do
          local_path="${base_dir}/${file}"
          mkdir -p "$(dirname "$local_path")"
          curl -o "$local_path" "${base_url}${file}"
          echo "Downloaded ${base_url}${file} to ${local_path}"
        done

    # Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Discover and run tests one by one
    - name: Run tests
      run: |
        # Discover all test files
        test_files=$(find test -name "test_*.py")
        
        # Track failures
        failed=0
        
        # Run each test file individually
        for test_file in $test_files; do
          echo "Running tests in $test_file..."
          if ! python -m unittest "$test_file" -v; then
            echo "::error::Tests in $test_file failed"
            failed=1
          fi
        done
        
        # Exit with failure if any test failed
        if [ $failed -ne 0 ]; then
          echo "::error::One or more test files failed"
          exit 1
        fi